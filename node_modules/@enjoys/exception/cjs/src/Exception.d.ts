import { NextFunction, Request, Response } from "express";
import { HttpExceptionParams, HttpStatusCodes } from "./types";
export declare class HttpException extends Error {
    constructor({ name, message, stack }: HttpExceptionParams);
    /**
     * Throws a new exception with the provided parameters.
     *
     * @param {HttpExceptionParams} name : The name, message, and stack of the exception.
     * @return {void}
     */
    private ThrowNewException;
    /**
    * Handles exceptions that occur during the execution of the program.
    *
    * @param {Error} err : The exception that occurred.
    * @param {Request} req : The incoming HTTP request.
    * @param {Response} res : The HTTP response to be sent back.
    * @param {NextFunction} next : The next middleware function in the chain.
    */
    private static ExceptionsArray;
    /**
     * Returns a string representing the type of error based on the given code.
     *
     * @param {string} name - The http error name.
     * @return {number} - The http error status code.
     */
    static TypeOfError(name: keyof HttpStatusCodes): number;
}
/**
 * Throws an HttpException with a "FORBIDDEN" name, "Access Denied" message, and a stack object containing
 * information about the forbidden resource.
 *
 * @param {Request} req - The request object.
 * @param {Response} res - The response object.
 * @param {NextFunction} next - The next function in the middleware chain.
 * @throws {HttpException} Throws an HttpException with a "FORBIDDEN" name, "Access Denied" message, and a stack
 * object containing information about the forbidden resource.
 */
declare function UnhandledRoutes(req: Request, res: Response, next: NextFunction): void;
/**
 * Handles exceptions by setting the HTTP status code, sending a JSON response with error details, and calling the next middleware function.
 *
 * @param {Error} err - The error object to handle.
 * @param {Request} req - The Express request object.
 * @param {Response} res - The Express response object.
 * @param {NextFunction} next - The next middleware function to call.
 * @return {void}
 */
/**
 * Handles exceptions by setting the HTTP status code, sending a JSON response with error details, and calling the next middleware function.
 *
 * @param {Error} err - The error object to handle.
 * @param {Request} req - The Express request object.
 * @param {Response} res - The Express response object.
 * @param {NextFunction} next - The next middleware function to call.
 * @return {void}
 */
declare function ExceptionHandler(err: Error, req: Request, res: Response, next: NextFunction): void;
declare function CustomExceptionHandler(err: Error, req: Request, res: Response, next: NextFunction): void;
export declare function createHandlers(): {
    UnhandledRoutes: typeof UnhandledRoutes;
    ExceptionHandler: typeof ExceptionHandler;
    CustomExceptionHandler: typeof CustomExceptionHandler;
};
export declare class ServerErrorException extends HttpException {
    constructor({ stack }: Partial<HttpExceptionParams>);
}
export declare class NotFoundException extends HttpException {
    constructor({ stack }: Partial<HttpExceptionParams>);
}
export declare class UnAuthorizedException extends HttpException {
    constructor({ stack }: Partial<HttpExceptionParams>);
}
export declare class BadGatewayException extends HttpException {
    constructor({ stack }: Partial<HttpExceptionParams>);
}
export declare class DuplicateEntryException extends HttpException {
    constructor({ stack }: Partial<HttpExceptionParams>);
}
export declare class ForbiddenException extends HttpException {
    constructor({ stack }: Partial<HttpExceptionParams>);
}
export declare class PayloadTooLargeException extends HttpException {
    constructor({ stack }: Partial<HttpExceptionParams>);
}
export declare class TooManyRequestException extends HttpException {
    constructor({ stack }: Partial<HttpExceptionParams>);
}
export declare class MethodNotAllowedException extends HttpException {
    constructor({ stack }: Partial<HttpExceptionParams>);
}
export declare class UnacceptableException extends HttpException {
    constructor({ stack }: Partial<HttpExceptionParams>);
}
export declare class NotImplementedException extends HttpException {
    constructor({ stack }: Partial<HttpExceptionParams>);
}
export {};
