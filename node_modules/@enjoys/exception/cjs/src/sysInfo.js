"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Info = void 0;
const node_process_1 = __importDefault(require("node:process"));
const node_os_1 = __importDefault(require("node:os"));
const fs = __importStar(require("fs"));
const node_path_1 = __importDefault(require("node:path"));
var Info;
(function (Info) {
    class System {
        constructor() {
            this.cpus = node_os_1.default.cpus();
        }
        /**
         * Retrieves system information.
         *
         * @return {sysInfo} An object containing various system information.
         */
        sys() {
            return {
                node: node_process_1.default.versions,
                uptime: node_os_1.default.uptime(),
                command_executed: node_process_1.default.title,
                pid: node_process_1.default.pid,
                features: node_process_1.default.features,
                homeDirectory: node_os_1.default.homedir()
            };
        }
        cpu() {
            return {
                cores: this.cpus.length,
                speed: this.cpus.reduce(function sum(memo, cpu) {
                    return memo + cpu.speed;
                }, 0) / this.cpus.length,
                model: this.cpus[0].model
            };
        }
        os() {
            return {
                platform: node_process_1.default.platform,
                arch: node_process_1.default.arch,
                hostname: node_os_1.default.hostname(),
                machine: node_os_1.default.machine(),
                version: node_os_1.default.version(),
            };
        }
        memory() {
            return {
                freemem: node_os_1.default.freemem(),
                totalmem: node_os_1.default.totalmem(),
                laod: {
                    1: node_os_1.default.loadavg()[0],
                    5: node_os_1.default.loadavg()[1],
                    15: node_os_1.default.loadavg()[2]
                }
            };
        }
        environment() {
            return {
                args: node_process_1.default.argv,
                node: node_process_1.default.execPath,
                cwd: node_process_1.default.cwd(),
                // env: Object.keys(process.env).sort().reduce(function reassemble(memo, key) {
                //   memo[key] = process.env[key];
                //   return memo;
                // }, {}),
                gid: node_process_1.default.pid,
                network: node_os_1.default.networkInterfaces()
            };
        }
        exception() {
            return {
            // heapdump: path.resolve(this.directory, 'exceptions', this.filename) +'.heapsnapshot',
            // ocurred: new Date(),
            // ms: Date.now(),
            // message: this.message,
            // stacktrace: this.stack.split('\n').map(function map(line) {
            //   return line.trim();
            // }).filter(Boolean),
            // line: (failing(this) || []).filter(function filter(stack) {
            //   return stack.failed;
            // })
            };
        }
        ReadPackageJson() {
            const content = fs.readFileSync(`${node_path_1.default.join(node_process_1.default.cwd(), "package.json")}`, { encoding: 'utf8' });
            const FileObject = JSON.parse(content);
            return {
                name: FileObject.name,
                version: FileObject.version,
                mainfile: FileObject.main,
                dependencies: FileObject.dependencies,
                devDependencies: FileObject.devDependencies
            };
        }
    }
    Info.System = System;
})(Info || (exports.Info = Info = {}));
